from pathlib import Path
import os
from typing import Dict, List, Optional
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv(Path(__file__).parent / '.env')

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –ö–∞–Ω–¥—Ä—ã –§–æ—Ä—Å–∞–∂"""
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–±–µ—Ä—ë—Ç—Å—è –∏–∑ .env)
    TOKEN: str = os.getenv("BOT_TOKEN", "")
    ADMIN_IDS: List[int] = [int(id) for id in os.getenv("ADMIN_IDS", "").split(",") if id]
    
    # –ß–∞—Ç-–≥—Ä—É–ø–ø—ã (–±–µ—Ä—ë—Ç—Å—è –∏–∑ .env)
    CHATS: Dict[str, int] = {
        'drivers': int(os.getenv("DRIVERS_CHAT", "0")),
        'logs': int(os.getenv("LOGS_CHAT", "0")),
        'support': int(os.getenv("SUPPORT_CHAT", "0"))
    }
    
    # –ù–æ–º–µ—Ä–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤
    DISPATCHER_PHONES: List[str] = [
        phone.strip() 
        for phone in os.getenv("DISPATCHER_PHONES", "").split(",") 
        if phone.strip()
    ]
    
    # –ü—É—Ç–∏
    BASE_DIR: Path = Path(__file__).parent
    DB_PATH: Path = BASE_DIR / "database" / "kandry_taxi.db"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ MySQL
    DB_CONFIG: Dict[str, Optional[str | int]] = {
        'host': os.getenv("DB_HOST"),
        'user': os.getenv("DB_USER"),
        'password': os.getenv("DB_PASS"),
        'db': os.getenv("DB_NAME"),
        'port': 3306,
        'connect_timeout': 10
    }
    
    # –ú–æ–¥—É–ª–∏
    MODULES: Dict[str, bool] = {
        "main_menu": True,
        "clients": True,
        "orders": False,
        "admin": False,
        "errors": False
    }

    # –ú–µ–Ω—é
    _MENU_ITEMS: Dict[str, str] = {
        "admin": "üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞",
        "orders": "üöñ –ó–∞–∫–∞–∑—ã"
    }

    @classmethod
    def register_menu_item(cls, module_name: str, button_text: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é –¥–ª—è –º–æ–¥—É–ª—è"""
        if module_name not in cls.MODULES:
            raise ValueError(f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!")
        cls._MENU_ITEMS[module_name] = button_text

    @classmethod
    def get_menu_items(cls) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é"""
        return [text for module, text in cls._MENU_ITEMS.items() 
               if cls.MODULES.get(module, False)]

    @classmethod
    def validate(cls):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        errors = []
        
        if not cls.TOKEN:
            errors.append("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ (BOT_TOKEN) –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env!")
        
        if not cls.ADMIN_IDS:
            errors.append("ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (ADMIN_IDS) –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env!")
        
        if not cls.DISPATCHER_PHONES:
            errors.append("–ù–æ–º–µ—Ä–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–≤ (DISPATCHER_PHONES) –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env!")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î
        if not all(cls.DB_CONFIG.values()):
            errors.append("–ù–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω—ã –≤ .env!")
        
        if errors:
            error_msg = "\n".join(f"‚ùå {error}" for error in errors)
            raise ValueError(f"–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:\n{error_msg}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    Config.validate()
except ValueError as e:
    print(e)
    exit(1)

config = Config()