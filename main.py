# main.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import asyncio
import logging
import sys
from pathlib import Path
from importlib import import_module
from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from config import Config

print("–¢–æ–∫–µ–Ω –∏–∑ .env:", Config.TOKEN)
print("–ê–¥–º–∏–Ω—ã:", Config.ADMIN_IDS)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
BASE_DIR = Path(__file__).parent
sys.path.insert(0, str(BASE_DIR))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(BASE_DIR / "bot.log")
    ]
)
logger = logging.getLogger(__name__)

class ModuleLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥—É–ª–µ–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    @staticmethod
    async def load_module(dp: Dispatcher, module_name: str) -> bool:
        try:
            module = import_module(f"modules.{module_name}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
            if hasattr(module, 'setup'):
                router = await module.setup()  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –∏–∑ setup()
                if router:
                    dp.include_router(router)
                    logger.info(f"–ú–æ–¥—É–ª—å '{module_name}' –∑–∞–≥—Ä—É–∂–µ–Ω")
                    return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ {module_name}: {str(e)}", exc_info=True)
        return False

    @staticmethod
    async def load_active_modules(dp: Dispatcher) -> int:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ Config"""
        loaded = 0
        for module_name, is_active in Config.MODULES.items():
            if is_active and await ModuleLoader.load_module(dp, module_name):
                loaded += 1
        return loaded

async def setup_fallback(dp: Dispatcher):
    """–ê–≤–∞—Ä–∏–π–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö"""
    fallback_router = Router()
    
    @fallback_router.message()
    async def fallback_handler(message):
        await message.answer("üîß –ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏")
        
    dp.include_router(fallback_router)
    logger.warning("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∞–≤–∞—Ä–∏–π–Ω—ã–π —Ä–æ—É—Ç–µ—Ä")

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        bot = Bot(
            token=Config.TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        dp = Dispatcher(storage=MemoryStorage())
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
        loaded = await ModuleLoader.load_active_modules(dp)
        if loaded == 0:
            await setup_fallback(dp)
            logger.error("–ù–∏ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        
        # –°—Ç–∞—Ä—Ç
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (–º–æ–¥—É–ª–µ–π: {loaded})")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")